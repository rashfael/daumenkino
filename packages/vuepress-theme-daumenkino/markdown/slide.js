// adapted from https://github.com/ynohat/markdown-it-revealjs/blob/master/index.js

const SEPARATOR_SECTION = '---'
const SEPARATOR_SUBSECTION = '==='

module.exports = function (md, options) {
	let openSlides = 0

	function isSectionSeparator (token) {
		return token.type === 'hr' && token.markup === SEPARATOR_SECTION
	}

	function isSubsectionSeparator (token) {
		return token.type === 'inline' && token.content === SEPARATOR_SUBSECTION
	}

	function isSeparator (token) {
		return isSectionSeparator(token) || isSubsectionSeparator(token)
	}

	md.renderer.rules.slide_open = function (tokens, idx, options, env) {
		return '<slide v-slot="{active}">'
	}
	md.renderer.rules.slide_close = function (tokens, idx, options, env) {
		return '</slide>'
	}

	function nextSeparator (tokens, start) {
		for (let i = start; i < tokens.length; i++) {
			if (isSeparator(tokens[i]))
				return i
		}
		return -1
	}

	function currentlyOpenSlide (tokens, at) {
		for (let i = at - 1; i >= 0; i--) {
			if (tokens[i].type === 'slide_open') {
				return i
			}
		}
		return -1
	}

	function openSlide (state) {
		openSlides++
		return new state.Token('slide_open', 'slide', 1)
	}

	function closeSlide (state) {
		openSlides--
		return new state.Token('slide_close', 'slide', -1)
	}

	md.core.ruler.push('daumenkino-slides', function (state) {
		let tokenIndex = 0
		while (true) {
			tokenIndex = nextSeparator(state.tokens, tokenIndex)
			if (tokenIndex < 0) break
			let token = state.tokens[tokenIndex]
			if (openSlides === 0) {
				state.tokens.unshift(openSlide(state))
				tokenIndex++
			}
			const newTokens = []
			if (isSectionSeparator(token)) {
				while (openSlides > 0) {
					newTokens.push(closeSlide(state))
				}
				newTokens.push(openSlide(state))
				// remove `hr` generated by plain markdown `---`
				state.tokens.splice(tokenIndex, 1, ...newTokens)
			} else {
				// if it is a vertical separator, we need to wrap the current slide in it's own section
				if (openSlides === 1) {
					let currentSlideIndex = currentlyOpenSlide(state.tokens, tokenIndex)
					state.tokens.splice(currentSlideIndex, 0, openSlide(state))
					tokenIndex++
				}
				if (openSlides === 2) {
					newTokens.push(closeSlide(state))
				}
				newTokens.push(openSlide(state))
				// because this is a custom token, it is first wrapped by the processor
				// in a paragraph, so we need to replace para_open, sep, para_close
				state.tokens.splice(tokenIndex - 1, 3, ...newTokens)
			}
		}

		while (openSlides > 0) {
			state.tokens.push(closeSlide(state))
		}
	})
}
